#!/bin/bash
RESET='\033[0m' 
BLACK='\033[0;30m'
RED='\033[0;31m' 
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m' 
PURPLE='\033[0;35m' 
CYAN='\033[0;36m'  
WHITE='\033[0;37m'

#defaults
[[ -z $EXPAND_TO ]] && EXPAND_TO="/"
[[ -z $OUTPUT_FILE ]] && OUTPUT_FILE="farts.tar.xz"

install_helpers() {
    sudo pacman -S --noconfirm fakeroot binutils elfutils gcc pkgconf make
    mkdir -p makepkg && cd makepkg
    for package in ${helpers[*]}; do 
        [[ $package = "makepkg" ]] && continue
        (
        git clone https://aur.archlinux.org/$package.git
        cd $package
        makepkg --noconfirm -fsric
        )
    done
}

#returns first installed aur helper
get_installed_helper() {
    for package in ${helpers[0]}; do 
        h=$(comm -12 <(pacman -Qq | sort) <(echo $package))
        echo ${h%"-bin"}
    done
}

install_dependancies() {
    AUR_HELPER=$(get_installed_helper)
    REPO_DEPS=$(comm -12 <(pacman -Slq | sort) <(echo ${dependancies[*]} | tr ' ' '\n' | sort))
    REPO_VALIDATED=""
    for r in $REPO_DEPS; do
        if pacman -Ss $r; then
            REPO_VALIDATED=$REPO_VALIDATED" $r"
        else
            echo -e ${RED}\'$r\' "not found in arch repositories, skipping.${RESET}"
        fi
    done
    sudo pacman --noconfirm --needed -Syu $REPO_VALIDATED

    if [[ ! -z $AUR_HELPER ]]; then
        AUR_DEPS=$(comm -13 <(pacman -Qq | tr ' ' '\n' | sort) <(echo ${dependancies[*]} | tr ' ' '\n' | sort))
        AUR_VALIDATED=""
        for r in $AUR_DEPS; do
            if $AUR_HELPER -Ss $r; then
                AUR_VALIDATED=$AUR_VALIDATED" $r"
            else
                echo -e ${RED}\'$r\' "not found in AUR, skipping.${RESET}"
            fi
        done
        $AUR_HELPER --noconfirm -Syu $AUR_VALIDATED
    fi
}

zip() {
    mkdir -p zip
    for f in ${system[*]}; do
        file=${f//\~/'$HOME'} #expand ~/ before sudo
        expanded=$(echo $file | envsubst | sed 's/\/\//\//g') #expand envs
        if [[ -d $expanded ]]; then
            mkdir -p zip/$file
            sudo -E /bin/sh -c "find $expanded -type f -print0" | \
                while IFS= read -r -d '' line; do
                    target=$(echo zip/${file}${line#$expanded} | sed 's/\/\//\//g')
                    echo -e ${line}${CYAN} "->" ${RESET}${target}
                    sudo -E /bin/cp -a ${expanded} ${target} || (ERR=1)
                done
        else
            echo -e ${expanded}${CYAN} "->" zip/${RESET}${file}
            base_filename=$(basename ${file})
            path_filename=$(realpath ${file})
            mkdir -p zip${path_filename#$base_filename}
            sudo -E /bin/cp -a ${expanded} zip${file} || (ERR=1)
        fi
    done
    (
    if [[ ! -z $system ]]; then
        echo -e "#!/bin/bash\nsystem=(" > zip/farts.cfg
        echo -e ${system[*]} | tr ' ' '\n' | sed -e 's/^\|$/"/g' >> zip/farts.cfg
        echo -e ")" >> zip/farts.cfg
    fi
    if [[ ! -z $helpers ]]; then
        echo -e "\nhelpers=(" >> zip/farts.cfg
        echo -e ${helpers[*]} | tr ' ' '\n' | sed -e 's/^\|$/"/g' >> zip/farts.cfg
        echo -e ")" >> zip/farts.cfg
    fi
    if [[ ! -z $dependancies ]]; then
        echo -e "\ndependancies=(" >> zip/farts.cfg
        echo -e ${dependancies[*]} | tr ' ' '\n' | sed -e 's/^\|$/"/g' >> zip/farts.cfg
        echo -e ")" >> zip/farts.cfg
    fi
    declare -f pre_custom post_custom >> zip/farts.cfg 
    )
    [[ ! -z $ERR ]] && \
        echo -e "${RED}One or more files could not be copied, make sure you have what you need!$RESET"
    sudo su -c "XZ_OPT=-9 tar --remove-files -cJf ${OUTPUT_FILE} zip"
}

unzip() {
    IGNORE=$(echo " farts.cfg" | sed "s/ / ! -wholename .\//g")
    (
    cd zip
    find . -type f $IGNORE -exec expand_file {} \;
    )
}

expand_file() {
    echo $@
    # file=$(echo $@ | envsubst | sed 's/\/\//\//g');
    # echo -e ${$@#./}${CYAN} "->" ${RESET}$EXPAND_TO"${file#./}";
    # [[ $(dirname $file) != "." ]] && \
    #     sudo mkdir -p $EXPAND_TO$(dirname ${file#./});
    # sudo \cp -rfa ${f#./} $EXPAND_TO"${file#./}";
}

clean() {
    sudo rm -rf zip/ makepkg/
}

usage() {
    echo -e "${GREEN}usage$RESET:"
    echo -e "    ${CYAN}farts zip ${GREEN}<config>$RESET: create a tar.xz of important files and installed packages as defined in config file. if no config file specified, farts.cfg in the current directory will be tried."
    echo -e "    ${CYAN}farts unzip ${GREEN}<farts.tar.xz>$RESET: expand tar.xz to root directory, install dependancies via pacman, run custom user install functions"
}

main() {
    sudo -v
    case $1 in 
    zip)
        shift
        if [[ ! -z $CONFIG_FILE ]]; then
            source $CONFIG_FILE
        elif [[ -f farts.cfg ]]; then
            source farts.cfg && CONFIG_FILE="farts.cfg"
        else
            echo "${RED}Config file not found!$RESET" && false
        fi
        [[ $? == "1" ]] && exit 1
        echo -e "${CYAN}Creating system archive using config file: ${RESET}"${CONFIG_FILE}
        zip || (clean; exit 0);;
   unzip)
        shift
        tar -xJf $1
        source zip/farts.cfg || exit 1
        unzip
        clean;;
    install)
        shift
        tar -xJf $1
        source zip/farts.cfg || exit 1
        unzip
        install_helpers
        pre_custom
        install_dependancies
        post_custom
        clean;;
    *)
        usage;;
    esac
}

while getopts x:o: option
do
  case "${option}"
    in
    x) EXPAND_TO=$1;shift;;
    c) CONFIG_FILE=$1;shift;;
    h) usage;;
  esac
done

if [[ ! -z $SUDO_USER ]]; then
    echo -e "${RED}Run without sudo!${RESET}"
    exit 1
fi
main $@
